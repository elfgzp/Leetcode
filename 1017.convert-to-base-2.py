class Solution:
    def baseNeg2(self, N: int) -> str:
        """
        按照十进制转二进制的方法，余数就是每个位数 “0” 和 “1” 的表示。
        但是若以 -2 为除数，则会出现余数为负数的情况，我们要想办法把余数变成正数。

        我们可以很容易知道：
        N // -2 = quotient ... remainder
        举个例子，当 N = 8 时
        8 // -2 = 4 .. 0
        4 // -2 = 2 .. 0
        2 // -2 = -1 .. 0
        -1 // -2 = 0 .. -1 
        此时余数小于零，我们要想办法把它变成大于零的数。
        
        我们可以知道：
        -1 = 0 * -2 + -1
        -1 = 0 * -2 + -1 + 2 - 2 (为什么加 2 不是加 1 呢，因为 2 是 -2 的倍数)
        -1 = 0 * -2 - 2 + 1
        -1 = 1 * -2 + 1

        所以上面的商和余数就变为：
        -1 // -2 = 1 ... 1

        继续我们的运算：
        1 // -2 = 0 ... 1

        所以完整的余数结果就是：
        0, 0, 0, 1, 1

        则 8 的 -2 进制数为：
        "11000"

        """
        if N == 0:
            return '0'
        
        res = []
        while N != 0:
            quotient, remainder = N // -2, N % -2
            N = quotient
            if remainder < 0:
                remainder += 2
                N += 1
            
            res.append(str(remainder))
        
        return ''.join(res[::-1])
